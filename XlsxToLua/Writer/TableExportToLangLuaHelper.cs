using LitJson;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

public class TableExportToLangLuaHelper
{
    // Lua文件名
    public const string LangLuaFileName = "LangTable";

    public static bool ExportLangTableToLangLua(out string errorString)
    {
        string readLangFilePath = string.Format("{0}/_lang/{1}/{2}", AppValues.ExcelFolderPath, AppValues.LangLuaFileType, TableExportToLangFileHelper.LangFileName);
        if (!File.Exists(readLangFilePath))
        {
            errorString = string.Format("找不到多语言表格：{0}", readLangFilePath);
            return false;
        }

        CSVReader csvReader = new CSVReader(readLangFilePath);

        // 选取需要的列
        int langKeyIndex = -1, langValueIndex = -1, otherIndex = -1;
        string relativePath = string.Format("_lang/{0}/{1}", AppValues.LangLuaFileType, TableExportToLangFileHelper.LangFileName);
        for (int index = 0; index < csvReader.ListName.Count; ++index)
        {
            string keyName = csvReader.ListName[index];
            Utils.Log(string.Format("多语言表格{0}中的列名{1}: {2}", relativePath, index, keyName));

            if (keyName.Equals(TableExportToLangFileHelper.LangFileKeyNameString, StringComparison.CurrentCultureIgnoreCase))
            {
                langKeyIndex = index;
            }
            else if (keyName.Equals(AppValues.LangLuaFileType, StringComparison.CurrentCultureIgnoreCase))
            {
                langValueIndex = index;
            }
            else
            {
                otherIndex = index;
            }
        }
        if (langKeyIndex == -1 || langValueIndex == -1)
        {
            errorString = string.Format("多语言表格中找不到期望的列名：{0}, {1}", TableExportToLangFileHelper.LangFileKeyNameString, AppValues.LangLuaFileType);
            return false;
        }


        // Lua文件前半部分：
        StringBuilder content = new StringBuilder();

        // 生成数据内容开头
        content.AppendLine("----------------------------------------");
        content.AppendLine("-- Auto generated by Language Tools.");
        content.AppendLine("-- Please don't modify this file manually.");
        content.AppendLine("----------------------------------------");
        content.AppendLine("");
        content.AppendLine("local LangTable = {");

        for (int row = 0; row < csvReader.Count; ++row)
        {
            // 将主键列作为key生成
            content.Append("    [\"");
            content.Append(csvReader.GetStringByColumn(row, langKeyIndex));
            content.Append("\"] = \"");
            content.Append(csvReader.GetStringByColumn(row, langValueIndex));
            content.AppendLine("\",");
        }

        // 生成数据内容结尾
        content.AppendLine("}");
        content.AppendLine("");
        content.AppendLine("return LangTable");

        string exportString = content.ToString();
        
        // 保存为lua文件
        if (Utils.SaveLangLuaFile(AppValues.LangLuaFileType, LangLuaFileName, exportString) == true)
        {
            errorString = null;
            return true;
        }
        else
        {
            errorString = "保存为lua文件失败\n";
            return false;
        }
    }
    
}
