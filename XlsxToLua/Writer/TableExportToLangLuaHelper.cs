using LitJson;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

public class TableExportToLangLuaHelper
{
    // Lua文件名
    private const string _LangLuaFileName = "LangTable";
    // 用于缩进lua table的字符串
    private static string _LUA_TABLE_INDENTATION_STRING = "\t";

    // 生成lua文件上方字段描述的配置
    // 每行开头的lua注释声明
    private static string _COMMENT_OUT_STRING = "-- ";
    // 变量名、数据类型、描述声明之间的间隔字符串
    private static string _DEFINE_INDENTATION_STRING = "   ";
    // dict子元素相对于父dict变量名声明的缩进字符串
    private static string _DICT_CHILD_INDENTATION_STRING = "   ";
    // 变量名声明所占的最少字符数
    private static int _FIELD_NAME_MIN_LENGTH = 30;
    // 数据类型声明所占的最少字符数
    private static int _FIELD_DATA_TYPE_MIN_LENGTH = 30;

    public static bool ExportTableToLangLua(out string errorString)
    {
        string readLangFilePath = string.Format("{0}/_lang/{1}/{2}", AppValues.ExcelFolderPath, AppValues.LangLuaFileType, TableExportToLangFileHelper.LangFileName);
        if (!File.Exists(readLangFilePath))
        {
            errorString = string.Format("找不到多语言表格：{0}", readLangFilePath);
            return false;
        }

        CSVReader csvReader = new CSVReader(readLangFilePath);

        // 选取需要的列
        int langKeyIndex = -1, langValueIndex = -1;
        for (int index = 0; index < csvReader.ListName.Count; ++index)
        {
            if (csvReader.ListName[index].Equals(TableExportToLangFileHelper.LangFileKeyNameString, StringComparison.CurrentCultureIgnoreCase))
            {
                langKeyIndex = index;
            }
            else if (csvReader.ListName[index].Equals(AppValues.LangLuaFileType, StringComparison.CurrentCultureIgnoreCase))
            {
                langValueIndex = index;
            }
        }
        if (langKeyIndex == -1 || langValueIndex == -1)
        {
            errorString = string.Format("找不到多语言表格中的两列：{0}和{1}", TableExportToLangFileHelper.LangFileKeyNameString, AppValues.LangLuaFileType);
            return false;
        }


        // Lua文件前半部分：
        StringBuilder content = new StringBuilder();

        // 生成数据内容开头
        content.AppendLine("----------------------------------------");
        content.AppendLine("-- Auto generated by Language Tools.");
        content.AppendLine("-- Please don't revise this file munually.");
        content.AppendLine("----------------------------------------");
        content.AppendLine("");
        content.AppendLine("    local LangTable =");
        content.AppendLine("    {");

        // 当前缩进量
        int currentLevel = 1;

        for (int row = 0; row < csvReader.Count; ++row)
        {
            // 将主键列作为key生成
            content.Append(_GetLuaTableIndentation(currentLevel));

            content.Append(csvReader.GetString(row, TableExportToLangFileHelper.LangFileKeyNameString));
            content.Append(" = \"");
            content.Append(csvReader.GetString(row, AppValues.LangLuaFileType));
            content.AppendLine("\"");
        }

        // 生成数据内容结尾
        content.AppendLine("    }");
        content.AppendLine("    return LangTable");

        string exportString = content.ToString();
        
        // 保存为lua文件
        if (Utils.SaveLangLuaFile(AppValues.LangLuaFileType, _LangLuaFileName, exportString) == true)
        {
            errorString = null;
            return true;
        }
        else
        {
            errorString = "保存为lua文件失败\n";
            return false;
        }
    }

    private static string _GetLuaTableIndentation(int level)
    {
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < level; ++i)
            stringBuilder.Append(_LUA_TABLE_INDENTATION_STRING);

        return stringBuilder.ToString();
    }
}
